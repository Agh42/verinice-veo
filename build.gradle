plugins {
    id 'org.springframework.boot' version '2.4.1' apply false
    id "com.github.spotbugs" version '4.6.0'
    id "com.diffplug.spotless" version "5.8.2" apply false
    id "io.freefair.lombok" version "5.3.0"
}
def continuousIntegrationBuild = rootProject.hasProperty('ci')

allprojects  {
    group = 'org.veo'
    version = '0.2.0-SNAPSHOT'

    apply plugin: "com.diffplug.spotless"

    def currentUserName = "git config user.name".execute().text.trim() ?: "<name>"

    spotless {
        groovyGradle {
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
        }
        java {
            target 'src/**/*.java', 'buildSrc/**/*.java'
            eclipse().configFile(rootProject.file('misc/eclipse/java-format.xml'))
            importOrderFile(rootProject.file('misc/eclipse/java.importorder'))
            addStep org.veo.LicenseHeaderStep.create(currentUserName)
            removeUnusedImports()
            trimTrailingWhitespace()
            replaceRegex('Consecutive empty block comment lines', /( *\*\n){2,}/, '*\n')
            replaceRegex('Empty line at block comment end', / \*\n *\*\//, ' */')
            replaceRegex('Empty comment block', /\/\*+\s+\*\//, '')
            replaceRegex('Empty line after annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\)\n)\n+/, '$1')
            replaceRegex('Empty line inside annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\n)\n+/, '$1')
            replaceRegex('Default value for Schema#required()', /((?<=@Schema\([^)]{1,500}), required = false)|((?<=@Schema\()required = false(, )?)/, '')
        }
        groovy {
            target 'src/**/*.groovy', 'buildSrc/**/*.groovy'
            addStep org.veo.LicenseHeaderStep.create(currentUserName)
            greclipse()
            importOrderFile(rootProject.file('misc/eclipse/java.importorder'))
            indentWithSpaces(4)
            trimTrailingWhitespace()
            replaceRegex('Extra space around equals sign', /(  += )|( =  +)/, ' = ')
            replaceRegex('Not one space between right round and left curly bracket', /\) *\{/, ') {')
        }
        format 'xml', {
            target 'src/**/*.xml', 'misc/eclipse/java-format.xml'
            eclipseWtp('xml')
        }
        format 'git', {
            target '**/.gitignore'

            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'markdown', {
            target '**/*.md'
            targetExclude '**/bin/**', '**/target/**'
            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }
        format 'json', {
            target '**/*.json'
            targetExclude '**/bin/**', '**/target/**'
            eclipseWtp('json').configFile rootProject.file('misc/eclipse/json-format.prefs')
            endWithNewline()
        }
        format 'Jenkinsfile', {
            target 'Jenkinsfile'
            indentWithSpaces(4)
            endWithNewline()
            trimTrailingWhitespace()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'io.freefair.lombok'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencyManagement {
        dependencies {
            dependency 'org.postgresql:postgresql:42.2.18'
            dependency 'net._01001111:jlorem:1.3'
            dependency 'commons-cli:commons-cli:1.4'
            dependency 'javax:javaee-api:8.0'
            [
                'jjwt-api',
                'jjwt-impl',
                'jjwt-jackson'
            ].each { dependency "io.jsonwebtoken:$it:0.11.2" }
            dependency 'com.h2databas:h2:1.4.199'
            [
                'spock-core',
                'spock-spring'
            ].each { dependency "org.spockframework:$it:1.3-groovy-2.5" }
            dependency 'org.apache.commons:commons-lang3:3.10'
            dependency 'javax.validation:validation-api:2.0.1.Final'
            // should be provided by spring boot dep. mgmt.:
            // dependency 'javax.transaction:javax.transaction-api:1.3'
            dependency 'org.springdoc:springdoc-openapi-ui:1.5.1'
            dependency 'io.swagger.core.v3:swagger-core:2.1.6'
            dependency 'com.github.javafaker:javafaker:1.0.2'
            [
                'jsonschema-generator',
                'jsonschema-module-jackson',
                'jsonschema-module-javax-validation',
                'jsonschema-module-swagger-2'
            ].each { dependency "com.github.victools:$it:4.16.0" }
            dependency 'net.ttddyy:datasource-proxy:1.7'
            dependency 'com.vladmihalcea:db-util:1.0.5'
            dependency 'com.networknt:json-schema-validator:1.0.45'
        }
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    repositories { mavenCentral() }

    pmd {
        toolVersion = '6.30.0'
        ruleSetConfig = rootProject.resources.text.fromFile('misc/pmd/rules.xml')
        ruleSets = []
        rulePriority = 2
        consoleOutput = true
    }
    pmdTest.enabled = false

    spotbugs.excludeFilter = rootProject.file('misc/spotbugs/exclude.xml')
    spotbugsTest.enabled = false
    // write human readable report on normal builds
    spotbugsMain.reports {
        // Jenkins needs xml reports to detect and display bugs.
        xml.enabled = continuousIntegrationBuild
        html.enabled = !continuousIntegrationBuild
    }

    // specific "continuous integration" settings needed by Jenkins
    if (continuousIntegrationBuild) {
        // Update the test result file timestamps so Jenkins picks them up even when doing incremental builds
        task jenkinsTestFix {
            inputs.files test.outputs.files
            doLast {
                if (!sourceSets.test.allSource.empty) {
                    def timestamp = System.currentTimeMillis()
                    test.reports.junitXml.destination.eachFile { it.lastModified = timestamp }
                }
            }
        }

        test {
            // Don't let failing tests fail the build, let the junit step in the Jenkins pipeline decide what to do
            ignoreFailures = true
            testLogging { exceptionFormat = 'full' }
            finalizedBy jenkinsTestFix
        }
    }

    dependencies {
        compileOnly 'org.slf4j:slf4j-api'
        runtimeOnly 'ch.qos.logback:logback-classic'
    }

    tasks.withType(JavaCompile) {
        configure(options){
            debugOptions.debugLevel = "source,lines,vars"
            // See https://docs.oracle.com/en/java/javase/11/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9
            // for a detailed list of linting keys.
            compilerArgs.addAll([
                '-Xlint:all',
                '-Xlint:-serial'
            ])
        }
    }
}
