plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE' apply false
    id "com.github.spotbugs" version '2.0.0'
    id "com.diffplug.gradle.spotless" version "3.25.0" apply false
    id "com.github.pivotalservices.cf-app" version "2.3.0-rc.8"
}

allprojects  {
    group = 'org.veo'
    version = '0.1.0-SNAPSHOT'

    apply plugin: "com.diffplug.gradle.spotless"

    def currentUserName = "git config user.name".execute().text.trim() ?: "<name>"

    spotless {
        groovyGradle {
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
        }
        java {
            target 'src/**/*.java', 'buildSrc/**/*.java'

            eclipse().configFile(rootProject.file('misc/eclipse/java-format.xml'))
            importOrderFile(rootProject.file('misc/eclipse/java.importorder'))
            addStep org.veo.LicenseHeaderStep.create(currentUserName)
            removeUnusedImports()
            trimTrailingWhitespace()
        }
        groovy {
            target 'src/**/*.groovy', 'buildSrc/**/*.groovy'
            addStep org.veo.LicenseHeaderStep.create(currentUserName)
            greclipse()
            importOrderFile(rootProject.file('misc/eclipse/java.importorder'))
            indentWithSpaces(4)
            trimTrailingWhitespace()
        }
        xml {
            target 'src/**/*.xml', 'misc/eclipse/java-format.xml'

            eclipse()
        }
        format 'git', {
            target '**/.gitignore'

            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'markdown', {
            target '**/*.md'

            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }
        format 'json', {
            target '**/*.json'

            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencyManagement {
        dependencies {
            dependency 'org.postgresql:postgresql:42.2.6'
            dependency 'net._01001111:jlorem:1.3'
            dependency 'commons-cli:commons-cli:1.4'
            dependency 'javax:javaee-api:8.0'
            [
                'jjwt-api',
                'jjwt-impl',
                'jjwt-jackson'
            ].each { dependency "io.jsonwebtoken:$it:0.10.7" }
            dependency 'com.github.java-json-tools:json-schema-validator:2.2.10'
            dependency 'com.h2databas:h2:1.4.199'
            [
                'spock-core',
                'spock-spring'
            ].each { dependency "org.spockframework:$it:1.3-groovy-2.4" }
            dependency 'org.apache.commons:commons-lang3:3.9'
            dependency 'org.modelmapper:modelmapper:2.3.5'
        }
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    repositories { mavenCentral() }

    pmd {
        toolVersion = '6.17.0'
        ruleSetConfig = rootProject.resources.text.fromFile('misc/pmd/rules.xml')
        ruleSets = []
        rulePriority = 2
        consoleOutput = true
    }
    pmdTest.enabled = false

    spotbugs.ignoreFailures = true
    spotbugsTest.enabled = false

    // Update the test result file timestamps so Jenkins picks them up even when doing incremental builds
    if (rootProject.hasProperty('ci')) {
        task jenkinsTestFix {
            inputs.files test.outputs.files
            doLast {
                if (!sourceSets.test.allSource.empty) {
                    def timestamp = System.currentTimeMillis()
                    test.reports.junitXml.destination.eachFile { it.lastModified = timestamp }
                }
            }
        }
        build.dependsOn(jenkinsTestFix)

        test { testLogging { exceptionFormat = 'full' } }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        runtime 'ch.qos.logback:logback-classic'
    }
}

// Set PWS user and password:
// $ export CF_CCUSER=NAME
// $ export CF_CCPASSWORD=PASSWORD
// Push application
// $ ./gradlew cf-push
cfConfig {
    ccHost = "api.run.pivotal.io"
    org = "veo"
    space = "development"
    name = "veo-api"

    filePath = "veo-rest/build/libs/veo-rest-0.1.0-SNAPSHOT.jar"
    buildpack = "https://github.com/cloudfoundry/java-buildpack.git"
}
