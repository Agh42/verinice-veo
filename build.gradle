plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE' apply false
    id "com.github.spotbugs" version '1.6.6'
    id "com.diffplug.gradle.spotless" version "3.16.0" apply false
}

allprojects  {
    group = 'org.veo'
    version = '0.1.0-SNAPSHOT'

    apply plugin: "com.diffplug.gradle.spotless"

    spotless {
        groovyGradle {
            greclipse()
            indentWithSpaces(4)
            paddedCell()
        }
        java {
            target 'src/**/*.java'

            eclipse().configFile(rootProject.file('spotless.eclipseformat.xml'))
            removeUnusedImports()
            importOrder 'java', 'javax', 'org', 'com', 'org.veo'
            trimTrailingWhitespace()
        }
        groovy {
            target 'src/**/*.groovy'

            greclipse()
            importOrder 'java', 'javax', 'org', 'com', 'org.veo'
            indentWithSpaces(4)
            trimTrailingWhitespace()
        }
        xml {
            target 'src/**/*.xml'

            eclipse()
        }
        format 'git', {
            target '**/.gitignore'

            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'markdown', {
            target '**/*.md'

            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }
        format 'json', {
            target '**/*.json'

            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencyManagement {
        dependencies {
            dependency 'commons-io:commons-io:2.6'
            dependency 'org.postgresql:postgresql:42.2.5'
            dependency 'net._01001111:jlorem:1.3'
            dependency 'commons-cli:commons-cli:1.4'
            dependency 'javax:javaee-api:8.0'
            dependency "io.jsonwebtoken:jjwt-api:0.10.5"
            dependency "io.jsonwebtoken:jjwt-impl:0.10.5"
            dependency "io.jsonwebtoken:jjwt-jackson:0.10.5"
            dependency 'com.github.java-json-tools:json-schema-validator:2.2.10'
            dependency 'com.h2databas:h2:1.4.197'
            dependency "org.spockframework:spock-spring:1.2-groovy-2.4"
            dependency "org.spockframework:spock-core:1.2-groovy-2.4"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    repositories { mavenCentral() }

    pmd.ignoreFailures = true
    spotbugs.ignoreFailures = true

    spotbugsTest.enabled = false
    pmdTest.enabled = false

    // Update the test result file timestamps so Jenkins picks them up even when doing incremental builds
    if (rootProject.hasProperty('ci')) {
        task jenkinsTestFix {
            inputs.files test.outputs.files
            doLast {
                if (!sourceSets.test.allSource.empty) {
                    def timestamp = System.currentTimeMillis()
                    test.reports.junitXml.destination.eachFile { it.lastModified = timestamp }
                }
            }
        }
        build.dependsOn(jenkinsTestFix)

        test { testLogging { exceptionFormat = 'full' } }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        runtime 'ch.qos.logback:logback-classic'
    }
}
