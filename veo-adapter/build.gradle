import groovy.json.JsonSlurper

def generatedSchemasDir = "$buildDir/generated_entity_schemas"
def domainTemplatesDir = "$buildDir/domain_templates"

sourceSets {
    main {
        resources {
            srcDir generatedSchemasDir
            srcDir domainTemplatesDir
            exclude 'schemas/custom', 'schemas/links'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'java-library'

configurations {
    generateSchemas
}

dependencies {

    api project(":veo-core-usecase")

    implementation 'javax.validation:validation-api'
    implementation 'com.networknt:json-schema-validator'

    compileOnly('org.projectlombok:lombok')
    compileOnly 'io.swagger.core.v3:swagger-core'

    testImplementation 'io.swagger.core.v3:swagger-core'
    testImplementation 'org.spockframework:spock-spring'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.codehaus.groovy:groovy-json'

    generateSchemas 'com.github.victools:jsonschema-generator'
    generateSchemas 'com.github.victools:jsonschema-module-jackson'
    generateSchemas 'com.github.victools:jsonschema-module-javax-validation'
    generateSchemas 'com.github.victools:jsonschema-module-swagger-2'
    generateSchemas 'io.swagger.core.v3:swagger-annotations:2.1.11'
}

task generateEntitySchemas(type: JavaExec) {
    def targetDirectory = file("$generatedSchemasDir/schemas")
    def schemaSnippetDir = file("src/main/resources/schemas")
    outputs.dir targetDirectory
    outputs.cacheIf { true }
    inputs.files compileJava.outputs
    inputs.files schemaSnippetDir
    classpath compileJava.outputs.files
    classpath compileJava.classpath
    classpath configurations.generateSchemas
    classpath file("${rootDir}/buildSrc/build/classes/java/main")
    mainClass = 'org.veo.GenerateEntitySchema'
    args = [
        targetDirectory.absolutePath,
        schemaSnippetDir.absolutePath,
        'org.veo.adapter.presenter.api.dto.full',
        'Asset',
        'Control',
        'Document',
        'Incident',
        'Scenario',
        'Person',
        'Process',
        'Scope'
    ]
}

task assembleDomainTemplates(type: JavaExec) {
    def targetDirectory = file("$domainTemplatesDir/domaintemplates/")
    def templateSnippetDir = rootProject.file('domaintemplates/')
    outputs.dir targetDirectory
    outputs.cacheIf { true }
    inputs.files compileJava.outputs
    inputs.files templateSnippetDir
    classpath compileJava.outputs.files
    classpath compileJava.classpath
    mainClass = 'org.veo.adapter.service.domaintemplate.DomainTemplateAssemblerMain'
    environment = [
        'domaintemplate.abbreviation': "DSGVO",
        'domaintemplate.authority': "SERNET",
        'domaintemplate.description': "The DSGVO DomainTemplate.",
        'domaintemplate.id': "f8ed22b1-b277-56ec-a2ce-0dbd94e24824",
        'domaintemplate.name': "DSGVO",
        'domaintemplate.out.file': "${targetDirectory}/dsgvo-example.json",
        'domaintemplate.revision': "latest",
        'domaintemplate.templateVersion': "1.0",
        'domaintemplate.catalogPrefixes': "tom",
        'tom.catalog.name': "DS-GVO-Controls",
        'tom.dir': "${templateSnippetDir}/dsgvo/tom",
        'tom.prefix': "TOM."
    ]
}

plugins.withId('eclipse'){
    eclipse {
        synchronizationTasks generateEntitySchemas, assembleDomainTemplates
        autoBuildTasks generateEntitySchemas, assembleDomainTemplates
    }
}

processResources.dependsOn(generateEntitySchemas)
processResources.dependsOn(assembleDomainTemplates)

task checkTranslations {
    def langFile = file('src/main/resources/lang/lang.json')
    inputs.file langFile
    def customSchemaFiles = fileTree(dir: 'src/main/resources/schemas/custom/', include: '**/*.json')
    inputs.files customSchemaFiles
    def domainPatternSchemaFiles = fileTree(dir: 'src/main/resources/schemas/domains/', include: '**/patternProperties.json')
    inputs.files domainPatternSchemaFiles

    doLast {
        def langJson = new groovy.json.JsonSlurper().parse(langFile)
        def languagesToCheck = [
            'German': langJson.lang.de,
            'English': langJson.lang.en
        ]

        def handleTranslationKey = { String translationKey, location = null ->
            languagesToCheck.each {lang, json->
                def translation = json.remove(translationKey)
                if (translation == null) {
                    logger.warn("Missing $lang translation for $translationKey in $location")
                }
            }
        }

        // Nameable base attributes
        handleTranslationKey('name', 'Nameable base attributes')
        handleTranslationKey('abbreviation', 'Nameable base attributes')
        handleTranslationKey('description', 'Nameable base attributes')

        customSchemaFiles.each { file->
            logger.info "Loading $file"
            def data = new groovy.json.JsonSlurper().parse(file)
            def isLinkSchema = data.items != null
            if (isLinkSchema) {
                // relevant data is nested in link schemas
                data = data.items
                // link IDs should be translated, custom aspect IDs should not
                handleTranslationKey(file.name.replace(".json", ""), "$file.name (custom link id)")
            }

            def properties = data.properties.attributes.properties
            def propertyNames = properties.keySet()
            logger.info "property names: $propertyNames"

            // custom aspect attribute ID / field in the editor
            properties.each {key, value->
                handleTranslationKey(key, "$file.name (custom aspect/link attribute id)")
                // custom aspect enum entry / value in drop-down
                value.enum?.each {
                    handleTranslationKey(it, "$file.name (custom aspect/link select value id)")
                }
                // custom aspect enum entry / value in multi-value drop-down
                value.items?.enum?.each {
                    handleTranslationKey(it, "$file.name (custom aspect/link select value id)")
                }
            }
        }

        domainPatternSchemaFiles.each { File file ->
            def type = file.parentFile.name.toLowerCase()
            def domainAssociationSchema = new JsonSlurper().parse(file).values().first()
            domainAssociationSchema.allOf.each{ condition ->
                def subType = condition.if.properties.subType.const
                condition.then.properties.status.enum.each{ status ->
                    handleTranslationKey("${type}_${subType}_status_${status}", file.absolutePath)
                }
            }
        }

        languagesToCheck.each {lang, json->
            json.each {
                logger.warn("Unused $lang translation $it")
            }
        }
    }
}

check.dependsOn checkTranslations