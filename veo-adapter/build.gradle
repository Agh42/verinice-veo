def generatedSchemasDir = "$buildDir/generated_entity_schemas"

sourceSets {
    main {
        resources {
            srcDir generatedSchemasDir
            exclude 'schemas/custom', 'schemas/links'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'java-library'

configurations {
    generateSchemas
}

dependencies {

    api project(":veo-core-usecase")

    implementation 'javax.validation:validation-api'

    compileOnly('org.projectlombok:lombok')
    compileOnly 'io.swagger.core.v3:swagger-core'

    testImplementation 'io.swagger.core.v3:swagger-core'
    testImplementation 'org.spockframework:spock-spring'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.networknt:json-schema-validator:1.0.43'

    testRuntimeOnly 'com.h2database:h2'

    generateSchemas 'com.github.victools:jsonschema-generator'
    generateSchemas 'com.github.victools:jsonschema-module-jackson'
    generateSchemas 'com.github.victools:jsonschema-module-javax-validation'
    generateSchemas 'com.github.victools:jsonschema-module-swagger-2'
    generateSchemas 'io.swagger.core.v3:swagger-annotations:2.1.4'
}

task generateEntitySchemas(type: JavaExec) {
    def targetDirectory = file("$generatedSchemasDir/schemas")
    def schemaSnippetDir = file("src/main/resources/schemas")
    outputs.dir targetDirectory
    inputs.files compileJava.outputs
    inputs.files schemaSnippetDir
    classpath compileJava.outputs.files
    classpath compileJava.classpath
    classpath configurations.generateSchemas
    classpath file("${rootDir}/buildSrc/build/classes/java/main")
    main = 'org.veo.GenerateEntitySchema'
    args = [
        targetDirectory.absolutePath,
        schemaSnippetDir.absolutePath,
        'org.veo.adapter.presenter.api.dto.full',
        'Asset',
        'Control',
        'Document',
        'Incident',
        'Scenario',
        'Person',
        'Process'
    ]
}

plugins.withId('eclipse'){
    eclipse {
        synchronizationTasks generateEntitySchemas
        autoBuildTasks generateEntitySchemas
    }
}

processResources.dependsOn(generateEntitySchemas)
