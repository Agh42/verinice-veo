import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'

dependencies {
    implementation project(":veo-adapter")
    implementation project(":veo-persistence")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'io.jsonwebtoken:jjwt-api'
    implementation 'org.springdoc:springdoc-openapi-ui'
    implementation 'io.swagger.core.v3:swagger-core'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.spockframework:spock-spring'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.networknt:json-schema-validator:1.0.43'
    testImplementation 'commons-codec:commons-codec'
    testImplementation 'com.vladmihalcea:db-util'
    testImplementation project(":veo-test")
}

bootRun {
    def activeSpringProfiles = 'psql'
    findProperty('springProfiles')?.with { activeSpringProfiles = it }
    System.properties.'spring.profiles.active'?.with { activeSpringProfiles = it }
    systemProperty 'spring.profiles.active', activeSpringProfiles
    systemProperty 'veo.basedir', "${System.getProperty("user.home")}/.local/share/veo"
    systemProperty 'veo.etag.salt', "zu#4Q8JKdy"
    if ( project.hasProperty('jvmArgs') ) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
}

class StartSpringBootAsync extends DefaultTask {
    @Internal
    ExecutorService es

    @Input
    Map systemProperties

    @TaskAction
    def startAsync() {
        es = Executors.newSingleThreadExecutor()
        Map props = systemProperties
        es.submit({
            project.javaexec {
                main = 'org.veo.rest.RestApplication'
                classpath = project.sourceSets.main.runtimeClasspath
                props.each {key, value ->
                    systemProperty(key, value)
                }
            }
        } as Callable)
        project.gradle.buildFinished {
            es.shutdownNow()
        }
    }
}

def waitUntilSpringBootIsUp(String url) {
    boolean success = false
    int count = 0
    while (count < 15 && !success) {
        println 'Trying to connect to \'' + url + '\' : Attempt number=' + count
        try {
            count += 1
            def connection = new URL(url).openConnection()
            connection.requestMethod = 'GET'
            connection.responseCode == 200
            success = true
        }
        catch (all) {
            sleep(5 * 1000) // wait for another 5 seconds until next retry
        }
    }
    if (success) {
        println 'SUCCESSFULLY connected to \'' + url + '\''
    } else {
        println 'FAILED to connect to \'' + url + '\''
    }
}

task generateTableCreateScript(type: StartSpringBootAsync) {
    description = 'Write an SQL table create script for the JPA mapping'
    group = 'Utility'
    dependsOn assemble
    def randomPort = new ServerSocket(0).withCloseable {
        it.localPort
    }
    systemProperties = [
        'spring.jpa.database-platform': 'org.hibernate.dialect.PostgreSQLDialect',
        'spring.jpa.properties.javax.persistence.schema-generation.create-source': 'metadata',
        'spring.jpa.properties.javax.persistence.schema-generation.scripts.action': 'create',
        'spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target': 'create.sql',
        'spring.datasource.url': 'jdbc:h2:mem:test;MODE=PostgreSQL',
        'spring.datasource.driver-class-name': 'org.h2.Driver',
        'veo.etag.salt': 'duXOwLWNNEaC2',
        'server.port': randomPort
    ]
    doLast {
        waitUntilSpringBootIsUp("http://localhost:$randomPort/schemas/links")
    }
}
