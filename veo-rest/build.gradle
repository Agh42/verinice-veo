import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

plugins { id "net.foragerr.jmeter" version "1.1.0-4.0" }

apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'

dependencies {
    compile project(":veo-core")
    compile project(":veo-adapter")
    compile project(":veo-persistence")

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile("org.springframework.boot:spring-boot-starter-security")
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile("io.jsonwebtoken:jjwt-api")

    runtime 'io.jsonwebtoken:jjwt-impl'
    runtime 'io.jsonwebtoken:jjwt-jackson'
    runtime 'com.h2database:h2'
    runtime 'org.postgresql:postgresql'

    testCompile project(":veo-json-validation")
    testCompile 'org.spockframework:spock-spring'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

bootRun {
    def activeSpringProfiles = 'psql'
    findProperty('springProfiles')?.with { activeSpringProfiles = it }
    System.properties.'spring.profiles.active'?.with { activeSpringProfiles = it }
    systemProperty 'spring.profiles.active', activeSpringProfiles
    systemProperty 'veo.basedir', "${System.getProperty("user.home")}/.local/share/veo"
}

def serverPortJMeter = System.properties.'jmeter.server.port' ?: 8071
def serverHostJMeter = System.properties.'jmeter.server.host' ?: 'localhost'
def testIterationsJMeter = System.properties.'jmeter.test.iterations' ?: 10
def testThreadsJMeter = System.properties.'jmeter.test.threads' ?: 5



jmeter {
    reportXslt = file("src/test/jmeter/jmeter-results-detail-report_21.xsl")
    jmLog = file("build/jmeter-report/jmeter.log")
    jmUserProperties = [
        "port=$serverPortJMeter",
        "host=$serverHostJMeter",
        "iterations=$testIterationsJMeter",
        "threads=$testThreadsJMeter"
    ]
    reportPostfix = ''
    enableReports = true
    enableExtendedReports = true
    csvLogFile=false
}

class StartSpringBootAsync extends DefaultTask {
    ExecutorService es

    @Input
    int serverPort

    @TaskAction
    def startAsync() {
        es = Executors.newSingleThreadExecutor()
        es.submit({
            project.javaexec {
                main = 'org.veo.rest.RestApplication'
                classpath = project.sourceSets.main.runtimeClasspath
                systemProperty('server.port', serverPort)
                systemProperty('logging.config', project.file('src/test/jmeter/logback.xml').absolutePath)
            }
        } as Callable)
    }
}

task startSpringBoot(type: StartSpringBootAsync) {
    description = 'Start Spring Boot in the background.'
    group = 'Load Test'
    serverPort = serverPortJMeter
}
startSpringBoot.dependsOn assemble

task waitUntilSpringBootIsUp {
    description = 'Call the /schemas/links endpoint and wait until it responds with 200.'
    group = 'Load Test'
    doLast {
        String url = "http://$serverHostJMeter:$serverPortJMeter/schemas/links"
        boolean success = false
        int count = 0
        while (count < 15 && !success) {
            println 'Trying to connect to \'' + url + '\' : Attempt number=' + count
            try {
                count += 1
                def connection = new URL(url).openConnection()
                connection.requestMethod = 'GET'
                connection.responseCode == 200
                success = true
            }
            catch (all) {
                sleep(5 * 1000) // wait for another 5 seconds until next retry
            }
        }
        if (success) {
            println 'SUCCESSFULLY connected to \'' + url + '\''
        } else {
            println 'FAILED to connect to \'' + url + '\''
        }
    }
}
waitUntilSpringBootIsUp.dependsOn startSpringBoot

jmGui.dependsOn waitUntilSpringBootIsUp

jmRun {
    dependsOn waitUntilSpringBootIsUp
    doLast {
        fileTree('build/jmeter-report/'){ include '*.xml' }.visit { item ->
            def fileName = item.name
            def path = item.file.parent
            def outputName = fileName.replaceAll(/-\d+-\d+/, '')
            assert item.file.renameTo(new File(path, outputName))
        }
    }
}

jmReport.dependsOn jmRun

// Set PWS user and password:
// $ export CF_CCUSER=NAME
// $ export CF_CCPASSWORD=PASSWORD
// Push application
// $ ./gradlew cf-push
cfConfig {
    ccHost = "api.run.pivotal.io"
    org = "veo"
    space = "development"
    name = "veo-api"

    filePath = bootJar.archivePath
    buildpack = "https://github.com/cloudfoundry/java-buildpack.git"
}

gradle.buildFinished {
    startSpringBoot.es?.shutdownNow()
}

