{
  "info": {
    "_postman_id": "be6aa115-4ce3-4af9-8c9a-c81f2e1900f3",
    "name": "verinice.VEO REST API",
    "description": "OpenAPI documentation for verinice.VEO.\n\nContact Support:\n Email: verinice@sernet.de",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Basic CRUD operations",
      "item": [
        {
          "name": "Create a unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Load the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"<add example here>\",\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"<add example here>\",\n \"description\": \"<add example here>\",\n \"riskvalues\": \"<add example here>\",\n \"objects\": \"<add example here>\",\n \"units\": \"<add example here>\",\n \"parent\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"domains\": [\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  }\n ]\n}"
            }
          ]
        },
        {
          "name": "Load all units",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One unit is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created unit is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('unitId'));",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('unitName'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Units loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n {\n  \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n  \"name\": \"<add example here>\",\n  \"version\": 2,\n  \"validFrom\": \"1990-12-31T23:59:60Z\",\n  \"validUntil\": \"1990-12-31T23:59:60Z\",\n  \"abbreviation\": \"<add example here>\",\n  \"description\": \"<add example here>\",\n  \"riskvalues\": \"<add example here>\",\n  \"objects\": \"<add example here>\",\n  \"units\": \"<add example here>\",\n  \"parent\": {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  },\n  \"domains\": [\n   {\n    \"displayName\": \"My Unit\",\n    \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n   },\n   {\n    \"displayName\": \"My Unit\",\n    \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n   }\n  ]\n },\n {\n  \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n  \"name\": \"<add example here>\",\n  \"version\": 2,\n  \"validFrom\": \"1990-12-31T23:59:60Z\",\n  \"validUntil\": \"1990-12-31T23:59:60Z\",\n  \"abbreviation\": \"<add example here>\",\n  \"description\": \"<add example here>\",\n  \"riskvalues\": \"<add example here>\",\n  \"objects\": \"<add example here>\",\n  \"units\": \"<add example here>\",\n  \"parent\": {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  },\n  \"domains\": [\n   {\n    \"displayName\": \"My Unit\",\n    \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n   },\n   {\n    \"displayName\": \"My Unit\",\n    \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n   }\n  ]\n }\n]"
            }
          ]
        },
        {
          "name": "Update the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"unitName\", \"Unit of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{unitETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{unitId}}\",\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"<add example here>\",\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the unit concurrently",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{unitETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{unitId}}\",\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"<add example here>\",\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create an asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"assetETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"version\": 2,\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"validUntil\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            },
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all assets in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Updates the asset",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"assetName\", \"Asset of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "value": "{{assetETag}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{assetId}}\",\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Asset updated",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the asset concurrently",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{assetETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{assetId}}\",\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Asset updated",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a process that uses the asset",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"processName\", \"Process of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"processId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{processName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"assets\": [\n    \t{\n\t        \"displayName\": \"{{assetName}}\",\n\t\t    \"targetUri\": \"/assets/{{assetId}}\"\n    \t}\t\n\t]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the process",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned process has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"processId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"processName\"))",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"processETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the process",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"processName\", \"Process of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned process has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"processId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"processName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{processETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{processId}}\",\n    \"name\": \"{{processName}}\",\n    \"description\": \"{{processName}} description\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"assets\": [\n    \t{\n\t        \"displayName\": \"{{assetName}}\",\n\t\t    \"targetUri\": \"/assets/{{assetId}}\"\n    \t}\t\n\t]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the process concurrently",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{processETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{processId}}\",\n    \"name\": \"{{processName}}\",\n    \"description\": \"{{processName}} description\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"assets\": [\n    \t{\n\t        \"displayName\": \"{{assetName}}\",\n\t\t    \"targetUri\": \"/assets/{{assetId}}\"\n    \t}\t\n\t]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all processes in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One process is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created process is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('processId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('processName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a person inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'CRUD test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all persons in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One person is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created person is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('personId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('personName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"personETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            },
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the person",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"personName\", \"Person with \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{personETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{personId}}\",\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the person concurrently",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{personETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{personId}}\",\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a control inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'CRUD test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/controls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all controls in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One control is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created control is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('controlId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('controlName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the control",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"controlETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            }
          ]
        },
        {
          "name": "Update the control",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"controlName\", \"Control of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{controlETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{controlId}}\",\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/controls/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update the control concurrently",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{controlETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{controlId}}\",\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/controls/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"name\": \"Lock doors\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"version\": 2,\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"Lock doors\",\n    \"description\": \"Lock doors\",\n    \"domains\": [\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"EU GDPR 2016-05-04\",\n            \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\",\n    \"customAspects\": \"<object>\",\n    \"links\": \"<object>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the process",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the control",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a new work  unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Create an asset inside the unit for linking",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a process that uses the asset",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"processName\", \"Process of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"processId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{processName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"links\": {\n        \"process_TypeOfSensitiveData\": [\n            {\n                \"type\": \"process_TypeOfSensitiveData\",\n                \"name\": \"requires\",\n                \"target\": {\n                    \"targetUri\": \"/assets/{{assetId}}\"\n                }\n            }\n        ]\n    },\n    \"customAspects\": {\n        \"process_SensitiveData\": {\n            \"type\": \"process_SensitiveData\",\n            \"applicableTo\": [\n                \"Control\"\n            ],\n            \"domains\": [],\n            \"attributes\": {\n                \"process_SensitiveData_SensitiveData\": true,\n                \"process_SensitiveData_comment\": \"no comment\"\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the process with properties",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned process has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"processId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"processName\"))",
                  "    pm.expect(jsonData.customAspects).to.have.property('process_SensitiveData');",
                  "    pm.expect(jsonData.links).to.have.property('process_TypeOfSensitiveData');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a person inside the unit with properties",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'CRUD test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\"links\": {\n        \"Person_responsible_for_Process\": [\n            {\n                \"type\": \"Person_responsible_for_Process\",\n                \"name\": \"requires\",\n                \"target\": {\n                    \"targetUri\": \"/processes/{{processId}}\"\n                }\n            }\n        ]\n    },\n    \"customAspects\": {\n        \"PersonCommons\": {\n            \"type\": \"PersonCommons\",\n            \"applicableTo\": [\n                \"Control\"\n            ],\n            \"domains\": [],\n            \"attributes\": {\n                \"personIsoAnrede\": \"personIsoAnredeFrau\",\n                \"personIsoSurname\": \"Schmidt\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the person with properties",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.customAspects).to.have.property('PersonCommons');",
                  "    pm.expect(jsonData.links).to.have.property('Person_responsible_for_Process');",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"href\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"href\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            },
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            }
          ]
        },
        {
          "name": "Create a control inside the unit with properties",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'CRUD test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"links\": {\n        \"Control_assignee_Person\": [\n            {\n                \"type\": \"Control_assignee_Person\",\n                \"name\": \"requires\",\n                \"target\": {\n                    \"targetUri\": \"/persons/{{personId}}\"\n                }\n            }\n        ]\n    },\n    \"customAspects\": {\n        \"ControlDataProtectionObjectivesEugdpr\": {\n            \"type\": \"ControlDataProtectionObjectivesEugdpr\",\n            \"applicableTo\": [\n                \"Control\"\n            ],\n            \"domains\": [],\n            \"attributes\": {\n                \"controlDataProtectionObjectivesEugdprPseudonymization\": true,\n                \"controlDataProtectionObjectivesEugdprEncryption\": false\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/controls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the control with properties",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.customAspects).to.have.property('ControlDataProtectionObjectivesEugdpr');",
                  "    pm.expect(jsonData.links).to.have.property('Control_assignee_Person');",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            }
          ]
        },
        {
          "name": "Create an asset inside the unit with properties",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n    ,\"links\": {\n        \"Asset_located_in_Asset\": [\n            {\n                \"type\": \"Asset_located_in_Asset\",\n                \"name\": \"requires\",\n                \"target\": {\n                    \"targetUri\": \"/assets/{{assetId}}\"\n                }\n            }\n        ]\n    },\n    \"customAspects\": {\n        \"AssetCommons\": {\n            \"type\": \"AssetCommons\",\n            \"applicableTo\": [\n                \"Control\"\n            ],\n            \"domains\": [],\n            \"attributes\": {\n                \"assetNum\": \"001\",\n                \"assetPlatform\": \"9 3/4\"\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "      pm.expect(jsonData.customAspects).to.have.property('AssetCommons');",
                  "    pm.expect(jsonData.links).to.have.property('Asset_located_in_Asset');",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Asset loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"Lock doors\",\n \"owner\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"Lock doors\",\n \"description\": \"Lock doors\",\n \"domains\": [\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"EU GDPR 2016-05-04\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/domain/<00000000-0000-0000-0000-000000000000>\"\n  }\n ],\n \"riskvalues\": \"<add example here>\",\n \"customAspects\": \"<object>\",\n \"links\": \"<object>\"\n}"
            }
          ]
        },
        {
          "name": "Create a process VEO-271",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"processName\", \"Process of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"processIdveo271\", resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Verarbeitungstätigkeit 1\",\n    \"customAspects\": {\n        \"process_SensitiveData\": {\n            \"attributes\": {\n                \"process_SensitiveData_SensitiveData\": true\n            },\n            \"type\": \"process_SensitiveData\"\n        }\n    },\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\",\n    \"assets\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"extinguishingTime\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/processes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the process VEO-271",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned process has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"processIdveo271\"));",
                  "    pm.expect(jsonData.name).to.equal(\"Verarbeitungstätigkeit 1\")",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{processIdveo271}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/processes/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "processes",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the work unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ],
      "description": "Basic CRUD operations"
    },
    {
      "name": "Filter functions",
      "item": [
        {
          "name": "Create a unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Create a sub-unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"subUnitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('subUnitName', 'CRUD test sub-unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"sub-unit\",\n    \"parent\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Create an asset inside the sub-unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'filter test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a process inside the sub-unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('processName', 'filter test process');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('processId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{processName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/processes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a person inside the sub-unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'filter test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a control inside the sub-unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'filter test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/controls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"<add example here>\",\n \"version\": 2,\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"validUntil\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"<add example here>\",\n \"description\": \"<add example here>\",\n \"riskvalues\": \"<add example here>\",\n \"objects\": \"<add example here>\",\n \"units\": \"<add example here>\",\n \"parent\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"domains\": [\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  }\n ]\n}"
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all assets in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all processes in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One process is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created process is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('processId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('processName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all persons in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One person is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created person is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('personId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('personName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all controls in the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One control is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created control is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('controlId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('controlName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls?unit={{unitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load all assets in the sub-unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets?unit={{subUnitId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{subUnitId}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Loading assets with invalid unit fails",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets?unit=12aae97e-e0b1-4900-a961-96a19b972f72",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "12aae97e-e0b1-4900-a961-96a19b972f72"
                }
              ]
            }
          },
          "response": [
            {
              "name": "default response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/assets?parent=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ],
                  "query": [
                    {
                      "key": "parent",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the process",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/processes/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{processId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/persons/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{personId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the control",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/controls/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{controlId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the sub-unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{subUnitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Search functions",
      "item": [
        {
          "name": "Create a unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Create an asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.searchUrl;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"searchId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"unitId\": \"{{unitId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/assets/searches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "searches"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Run a search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{searchId}}",
              "host": [
                "{{baseUrl}}{{searchId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete the asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{assetId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Scope and composite tests",
      "item": [
        {
          "name": "Create a unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'My Unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Create an asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'My Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a composite asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositeAssetName', 'My composite Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositeAssetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositeAssetName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/assets/{{assetId}}\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a person inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'My Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a composite person inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositePersonName', 'My composite Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositePersonId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositePersonName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/persons/{{personId}}\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a scope inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('scopeName', 'My Scope');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('scopeId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{scopeName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"members\": [\n        {\n            \"targetUri\": \"/assets/{{compositeAssetId}}\"\n        },\n        {\n            \"targetUri\": \"/persons/{{compositePersonId}}\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/scopes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "scopes"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the work unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Risk tests",
      "item": [
        {
          "name": "Create a unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'My Unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/units",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ]
            }
          },
          "response": [
            {
              "name": "Unit created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"My unit\",\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"U-96\",\n    \"description\": \"This is currently the main and only unit for our organization.\",\n    \"riskvalues\": \"<add example here>\",\n    \"objects\": \"<add example here>\",\n    \"units\": \"<add example here>\",\n    \"parent\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/units",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Load the unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitETag\", eTag);",
                  "",
                  "pm.collectionVariables.set(\"domainUri\", jsonData.domains[0].targetUri);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit loaded",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n \"name\": \"<add example here>\",\n \"validFrom\": \"1990-12-31T23:59:60Z\",\n \"abbreviation\": \"<add example here>\",\n \"description\": \"<add example here>\",\n \"riskvalues\": \"<add example here>\",\n \"objects\": \"<add example here>\",\n \"units\": \"<add example here>\",\n \"parent\": {\n  \"displayName\": \"My Unit\",\n  \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n },\n \"domains\": [\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  },\n  {\n   \"displayName\": \"My Unit\",\n   \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n  }\n ]\n}"
            }
          ]
        },
        {
          "name": "Create an asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'My Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"domains\" : [{\"targetUri\": \"{{domainUri}}\"}]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a composite asset inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositeAssetName', 'My composite Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositeAssetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositeAssetName}}\",\n    \"owner\": { \"targetUri\": \"/units/{{unitId}}\" },\n    \"domains\": [{ \"targetUri\": \"{{domainUri}}\" }],\n    \"parts\": [{ \"targetUri\": \"/assets/{{assetId}}\" }]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a scenario  inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('scenarioName', 'My Scenario');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('scenarioId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{scenarioName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/scenarios",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "scenarios"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a composite scenario inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositeScenarioName', 'My composite Scenario');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositeScenarioId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositeScenarioName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/scenarios/{{scenarioId}}\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/scenarios",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "scenarios"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a person inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'My Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a composite person inside the unit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositePersonName', 'My composite Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositePersonId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositePersonName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/persons/{{personId}}\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/persons",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a risk for the asset",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('scopeId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"scenario\": { \"targetUri\": \"/scenarios/{{scenarioId}}\" },\n    \"domains\": [{ \"targetUri\": \"{{domainUri}}\" }]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetId}}/risks",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "{{assetId}}",
                "risks"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Load the risk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Returned risk has the correct values\", function () {",
                  "    pm.expect(jsonData._self).to.equal(\"/assets/\" + pm.collectionVariables.get(\"assetId\")",
                  "        + \"/risks/\" + pm.collectionVariables.get(\"scenarioId\"));",
                  "});",
                  "pm.environment.set(\"riskResponse\", jsonData);",
                  "",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"riskETag\", eTag);",
                  "",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetId}}/risks/{{scenarioId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "{{assetId}}",
                "risks",
                "{{scenarioId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update the risk with a risk owner",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var body = pm.environment.get(\"riskResponse\");",
                  "body.riskOwner = {",
                  "    targetUri: \"/persons/\" + pm.collectionVariables.get(\"personId\"),",
                  "};",
                  "",
                  "pm.environment.set(\"riskPutBody\", JSON.stringify(body));",
                  "",
                  "// wait 1 sec to make sure that update-timestamp is past creation timestamp:",
                  "//setTimeout(function(){}, 5000);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Returned risk has the correct values\", function () {",
                  "    pm.expect(jsonData.riskOwner).to.exist;",
                  "    pm.expect(Date.parse(jsonData.updatedAt)).greaterThan(Date.parse(jsonData.createdAt));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "value": "{{riskETag}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{riskPutBody}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetId}}/risks/{{scenarioId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "{{assetId}}",
                "risks",
                "{{scenarioId}}"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create a risk for the asset composite",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('scopeId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"scenario\": { \"targetUri\": \"/scenarios/{{compositeScenarioId}}\" },\n    \"domains\": [{ \"targetUri\": \"{{domainUri}}\" }]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets/{{compositeAssetId}}/risks",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "{{compositeAssetId}}",
                "risks"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the scenario",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{riskETag}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/scenarios/{{scenarioId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "scenarios",
                "{{scenarioId}}"
              ]
            }
          },
          "response": [
            {
              "name": "Asset created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<add example here>\",\n    \"owner\": {\n        \"displayName\": \"My Unit\",\n        \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n    },\n    \"id\": \"adf037f1-0089-48ad-9177-92269918758b\",\n    \"validFrom\": \"1990-12-31T23:59:60Z\",\n    \"validUntil\": \"1990-12-31T23:59:60Z\",\n    \"abbreviation\": \"<add example here>\",\n    \"description\": \"<add example here>\",\n    \"domains\": [\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        },\n        {\n            \"displayName\": \"My Unit\",\n            \"targetUri\": \"http://<api.example.org>/api/v1/unit/<00000000-0000-0000-0000-000000000000>\"\n        }\n    ],\n    \"links\": \"<add example here>\",\n    \"customAspects\": \"<add example here>\",\n    \"riskvalues\": \"<add example here>\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/assets",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "assets"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete the work unit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/units/:uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "variable": [
                {
                  "key": "uuid",
                  "value": "{{unitId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "Unit not found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Unit deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/units/:uuid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "units",
                    ":uuid"
                  ],
                  "variable": [
                    {
                      "key": "uuid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": [
      {
        "key": "tokenType",
        "value": "bearer",
        "type": "string"
      },
      {
        "key": "accessToken",
        "value": "{{accessToken}}",
        "type": "string"
      },
      {
        "key": "scope",
        "value": "veo-user",
        "type": "string"
      },
      {
        "key": "accessTokenUrl",
        "value": "https://keycloak.staging.verinice.com/auth/realms/verinice-veo/protocol/openid-connect/token",
        "type": "string"
      },
      {
        "key": "authUrl",
        "value": "https://keycloak.staging.verinice.com/auth/realms/verinice-veo/protocol/openid-connect/auth",
        "type": "string"
      },
      {
        "key": "client_authentication",
        "value": "body",
        "type": "string"
      },
      {
        "key": "clientId",
        "value": "veo-development-client",
        "type": "string"
      },
      {
        "key": "redirect_uri",
        "value": "http://localhost:8070",
        "type": "string"
      },
      {
        "key": "tokenName",
        "value": "veotoken",
        "type": "string"
      },
      {
        "key": "addTokenTo",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8070"
    },
    {
      "key": "unitId",
      "value": ""
    },
    {
      "key": "processId",
      "value": ""
    },
    {
      "key": "processName",
      "value": ""
    },
    {
      "key": "unitName",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "assetId",
      "value": ""
    },
    {
      "key": "assetName",
      "value": ""
    },
    {
      "key": "personId",
      "value": ""
    },
    {
      "key": "personName",
      "value": ""
    },
    {
      "key": "controlId",
      "value": ""
    },
    {
      "key": "controlName",
      "value": ""
    },
    {
      "key": "processIdveo271",
      "value": ""
    },
    {
      "key": "subUnitName",
      "value": ""
    },
    {
      "key": "subUnitId",
      "value": ""
    },
    {
      "key": "searchId",
      "value": ""
    },
    {
      "key": "unitETag",
      "value": ""
    },
    {
      "key": "assetETag",
      "value": ""
    },
    {
      "key": "processETag",
      "value": ""
    },
    {
      "key": "personETag",
      "value": ""
    },
    {
      "key": "controlETag",
      "value": ""
    },
    {
      "key": "domainUri",
      "value": ""
    },
    {
      "key": "compositeAssetName",
      "value": ""
    },
    {
      "key": "compositeAssetId",
      "value": ""
    },
    {
      "key": "scenarioName",
      "value": ""
    },
    {
      "key": "scenarioId",
      "value": ""
    },
    {
      "key": "compositeScenarioName",
      "value": ""
    },
    {
      "key": "compositeScenarioId",
      "value": ""
    },
    {
      "key": "compositePersonName",
      "value": ""
    },
    {
      "key": "compositePersonId",
      "value": ""
    },
    {
      "key": "scopeName",
      "value": ""
    },
    {
      "key": "scopeId",
      "value": ""
    },
    {
      "key": "riskResponse",
      "value": ""
    },
    {
      "key": "riskETag",
      "value": ""
    }
  ]
}
