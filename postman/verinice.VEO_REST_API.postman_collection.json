{
  "auth": {
    "oauth2": [
      {
        "key": "tokenType",
        "type": "string",
        "value": "bearer"
      },
      {
        "key": "accessToken",
        "type": "string",
        "value": "{{accessToken}}"
      },
      {
        "key": "scope",
        "type": "string",
        "value": "veo-user"
      },
      {
        "key": "accessTokenUrl",
        "type": "string",
        "value": "https://keycloak.staging.verinice.com/auth/realms/verinice-veo/protocol/openid-connect/token"
      },
      {
        "key": "authUrl",
        "type": "string",
        "value": "https://keycloak.staging.verinice.com/auth/realms/verinice-veo/protocol/openid-connect/auth"
      },
      {
        "key": "client_authentication",
        "type": "string",
        "value": "body"
      },
      {
        "key": "clientId",
        "type": "string",
        "value": "veo-development-client"
      },
      {
        "key": "redirect_uri",
        "type": "string",
        "value": "http://localhost:8070"
      },
      {
        "key": "tokenName",
        "type": "string",
        "value": "veotoken"
      },
      {
        "key": "addTokenTo",
        "type": "string",
        "value": "header"
      }
    ],
    "type": "oauth2"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    }
  ],
  "info": {
    "_postman_id": "407ec445-5c1b-488e-b7ce-f126828464e3",
    "description": "OpenAPI documentation for verinice.VEO.\n\nContact Support:\n Email: verinice@sernet.de",
    "name": "verinice.VEO REST API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "description": "Basic CRUD operations",
      "item": [
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "raw": "{{baseUrl}}/units/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One unit is available\", function () {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created unit is returned\", function () {",
                  "    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get('unitId'));",
                  "    pm.expect(jsonData[0].name).to.equal(pm.collectionVariables.get('unitName'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all units",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"unitName\", \"Unit of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{unitId}}\",\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{unitETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "raw": "{{baseUrl}}/units/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the unit concurrently",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{unitId}}\",\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{unitETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "raw": "{{baseUrl}}/units/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"assetETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the asset",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "raw": "{{baseUrl}}/assets/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all assets in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/assets?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"assetName\", \"Asset of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Updates the asset",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{assetId}}\",\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{assetETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "raw": "{{baseUrl}}/assets/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the asset concurrently",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{assetId}}\",\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{assetETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "raw": "{{baseUrl}}/assets/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'CRUD test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a person inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "raw": "{{baseUrl}}/persons"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One person is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created person is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('personId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('personName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all persons in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/persons?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"personETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the person",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "raw": "{{baseUrl}}/persons/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"personName\", \"Person with \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the person",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{personId}}\",\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{personETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "raw": "{{baseUrl}}/persons/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the person concurrently",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{personId}}\",\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{personETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "raw": "{{baseUrl}}/persons/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'CRUD test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a control inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "raw": "{{baseUrl}}/controls"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One control is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created control is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('controlId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('controlName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all controls in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/controls?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "",
                  "});",
                  "var eTag = extractTextBetweenQuotes(pm.response.headers.get(\"ETag\"));",
                  "pm.test(\"ETag header is a string\", function () {",
                  "    pm.expect(eTag).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"controlETag\", eTag);",
                  "",
                  "function extractTextBetweenQuotes(str){",
                  "  const matches = str.match(/\"(.*?)\"/);",
                  "  return matches",
                  "    ? matches[1]",
                  "    : str;",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the control",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "raw": "{{baseUrl}}/controls/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set(\"controlName\", \"Control of \" + pm.variables.replaceIn('{{$randomFirstName}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the control",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{controlId}}\",\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{controlETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "raw": "{{baseUrl}}/controls/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(412);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Update the control concurrently",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{controlId}}\",\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "If-Match",
                "type": "text",
                "value": "{{controlETag}}"
              }
            ],
            "method": "PUT",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "raw": "{{baseUrl}}/controls/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the asset",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/assets/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the person",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/persons/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the control",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/controls/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a new work  unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the unit for linking",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'CRUD test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a person inside the unit with properties",
          "request": {
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"customAspects\": {\n        \"person_generalInformation\": {\n            \"type\": \"person_generalInformation\",\n            \"domains\": [],\n            \"attributes\": {\n                \"person_generalInformation_salutation\": \"person_commons_salutation_ms\",\n                \"person_generalInformation_familyName\": \"Schmidt\"\n            }\n        }\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "raw": "{{baseUrl}}/persons"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned person has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"personId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"personName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.customAspects).to.have.property('person_generalInformation');",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the person with properties",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":id"
              ],
              "raw": "{{baseUrl}}/persons/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'CRUD test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a control inside the unit with properties",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"customAspects\": {\n        \"control_dataProtection\": {\n            \"type\": \"control_dataProtection\",\n            \"domains\": [],\n            \"attributes\": {\n                \"control_dataProtection_objectives\": [\"control_dataProtection_objectives_pseudonymization\"]\n            }\n        }\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "raw": "{{baseUrl}}/controls"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned control has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"controlId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"controlName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.customAspects).to.have.property('control_dataProtection');",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the control with properties",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":id"
              ],
              "raw": "{{baseUrl}}/controls/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the unit with properties",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"customAspects\": {\n        \"asset_details\": {\n            \"type\": \"asset_details\",\n            \"applicableTo\": [\n                \"Control\"\n            ],\n            \"domains\": [],\n            \"attributes\": {\n                \"asset_details_number\": 1,\n                \"asset_details_operatingStage\": \"asset_details_operatingStage_planning\"\n            }\n        }\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned asset has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"assetId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"assetName\"))",
                  "    pm.expect(jsonData.owner.displayName).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "    pm.expect(jsonData.owner.targetUri).to.equal(pm.collectionVariables.get(\"baseUrl\")+'/units/'+pm.collectionVariables.get(\"unitId\"));",
                  "      pm.expect(jsonData.customAspects).to.have.property('asset_details');",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the asset",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":id"
              ],
              "raw": "{{baseUrl}}/assets/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the work unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "name": "Basic CRUD operations"
    },
    {
      "item": [
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"subUnitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('subUnitName', 'CRUD test sub-unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a sub-unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"sub-unit\",\n    \"parent\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'filter test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the sub-unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('processName', 'filter test process');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('processId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a process inside the sub-unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{processName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ],
              "raw": "{{baseUrl}}/processes"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'filter test person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a person inside the sub-unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "raw": "{{baseUrl}}/persons"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('controlName', 'filter test control');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('controlId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a control inside the sub-unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{controlName}}\",\n    \"owner\": {\n        \"displayName\": \"{{subUnitName}}\",\n        \"targetUri\": \"/units/{{subUnitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "raw": "{{baseUrl}}/controls"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Returned unit has the correct values\", function () {",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"unitId\"));",
                  "    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"unitName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":id"
              ],
              "raw": "{{baseUrl}}/units/:id",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "id",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all assets in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/assets?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One process is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created process is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('processId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('processName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all processes in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/processes?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One person is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created person is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('personId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('personName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all persons in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/persons?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One control is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created control is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('controlId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('controlName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all controls in the unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{unitId}}"
                }
              ],
              "raw": "{{baseUrl}}/controls?unit={{unitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"One asset is available\", function () {",
                  "    pm.expect(jsonData.items).to.have.lengthOf(1);",
                  "});",
                  "pm.test(\"The created asset is returned\", function () {",
                  "    pm.expect(jsonData.items[0].id).to.equal(pm.collectionVariables.get('assetId'))",
                  "    pm.expect(jsonData.items[0].name).to.equal(pm.collectionVariables.get('assetName'))",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Load all assets in the sub-unit",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "{{subUnitId}}"
                }
              ],
              "raw": "{{baseUrl}}/assets?unit={{subUnitId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Loading assets with invalid unit fails",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "query": [
                {
                  "key": "unit",
                  "value": "12aae97e-e0b1-4900-a961-96a19b972f72"
                }
              ],
              "raw": "{{baseUrl}}/assets?unit=12aae97e-e0b1-4900-a961-96a19b972f72"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the asset",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/assets/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the process",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "processes",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/processes/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{processId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the person",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/persons/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{personId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the control",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "controls",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/controls/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{controlId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the sub-unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{subUnitId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "name": "Filter functions"
    },
    {
      "item": [
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'CRUD test unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'CRUD test asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"displayName\": \"{{unitName}}\",\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.searchUrl;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"searchId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a search",
          "request": {
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\n    \"unitId\": {\"values\": [\"{{unitId}}\"]}\n}"
            },
            "header": [],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                "searches"
              ],
              "raw": "{{baseUrl}}/assets/searches"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Run a search",
          "request": {
            "header": [],
            "method": "GET",
            "url": {
              "host": [
                "{{baseUrl}}{{searchId}}"
              ],
              "raw": "{{baseUrl}}{{searchId}}"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the asset",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/assets/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{assetId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "name": "Search functions"
    },
    {
      "item": [
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set(\"unitId\", resourceId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('unitName', 'My Unit');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{unitName}}\"\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units"
              ],
              "raw": "{{baseUrl}}/units"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('assetName', 'My Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('assetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create an asset inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{assetName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositeAssetName', 'My composite Asset');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositeAssetId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a composite asset inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositeAssetName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/assets/{{assetId}}\"\n        }\n    ]\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assets"
              ],
              "raw": "{{baseUrl}}/assets"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('personName', 'My Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('personId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a person inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{personName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    }\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "raw": "{{baseUrl}}/persons"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('compositePersonName', 'My composite Person');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('compositePersonId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a composite person inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{compositePersonName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"parts\": [\n        {\n            \"targetUri\": \"/persons/{{personId}}\"\n        }\n    ]\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "persons"
              ],
              "raw": "{{baseUrl}}/persons"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('scopeName', 'My Scope');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = pm.response.json();",
                  "var resourceId = jsonData.resourceId;",
                  "pm.test(\"Resource ID is a string\", function () {",
                  "    pm.expect(resourceId).to.be.a('string')",
                  "});",
                  "pm.collectionVariables.set('scopeId', resourceId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Create a scope inside the unit",
          "request": {
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{scopeName}}\",\n    \"owner\": {\n        \"targetUri\": \"/units/{{unitId}}\"\n    },\n    \"members\": [\n        {\n            \"targetUri\": \"/assets/{{compositeAssetId}}\"\n        },\n        {\n            \"targetUri\": \"/persons/{{compositePersonId}}\"\n        }\n    ]\n}"
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "scopes"
              ],
              "raw": "{{baseUrl}}/scopes"
            }
          },
          "response": []
        },
        {
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validate status code\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "name": "Delete the work unit",
          "request": {
            "header": [],
            "method": "DELETE",
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "units",
                ":uuid"
              ],
              "raw": "{{baseUrl}}/units/:uuid",
              "variable": [
                {
                  "description": "(Required) ",
                  "key": "uuid",
                  "value": "{{unitId}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "name": "Scope and composite tests"
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8070"
    },
    {
      "key": "unitId",
      "value": ""
    },
    {
      "key": "processId",
      "value": ""
    },
    {
      "key": "processName",
      "value": ""
    },
    {
      "key": "unitName",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "assetId",
      "value": ""
    },
    {
      "key": "assetName",
      "value": ""
    },
    {
      "key": "personId",
      "value": ""
    },
    {
      "key": "personName",
      "value": ""
    },
    {
      "key": "controlId",
      "value": ""
    },
    {
      "key": "controlName",
      "value": ""
    },
    {
      "key": "processIdveo271",
      "value": ""
    },
    {
      "key": "subUnitName",
      "value": ""
    },
    {
      "key": "subUnitId",
      "value": ""
    },
    {
      "key": "searchId",
      "value": ""
    },
    {
      "key": "unitETag",
      "value": ""
    },
    {
      "key": "assetETag",
      "value": ""
    },
    {
      "key": "processETag",
      "value": ""
    },
    {
      "key": "personETag",
      "value": ""
    },
    {
      "key": "controlETag",
      "value": ""
    },
    {
      "key": "domainUri",
      "value": ""
    },
    {
      "key": "compositeAssetName",
      "value": ""
    },
    {
      "key": "compositeAssetId",
      "value": ""
    },
    {
      "key": "scenarioName",
      "value": ""
    },
    {
      "key": "scenarioId",
      "value": ""
    },
    {
      "key": "compositeScenarioName",
      "value": ""
    },
    {
      "key": "compositeScenarioId",
      "value": ""
    },
    {
      "key": "compositePersonName",
      "value": ""
    },
    {
      "key": "compositePersonId",
      "value": ""
    },
    {
      "key": "scopeName",
      "value": ""
    },
    {
      "key": "scopeId",
      "value": ""
    },
    {
      "key": "riskResponse",
      "value": ""
    },
    {
      "key": "riskETag",
      "value": ""
    }
  ]
}
